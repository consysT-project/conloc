import org.checkerframework.dataflow.qual.*;
import org.checkerframework.framework.qual.HasQualifierParameter;
import de.tuda.stg.consys.checker.qual.Inconsistent;
import de.tuda.stg.consys.checker.qual.*;

package java.lang;

class Object {
    @SideEffectFree
    @PolyConsistent boolean equals(@PolyConsistent Object o);

    @SideEffectFree
    String toString();

    @SideEffectFree
    int hashCode();
}

class String {
    @SideEffectFree
    @PolyConsistent boolean equals(@PolyConsistent Object o);
}

class StringBuilder {
    @Mutable StringBuilder append(double d);
    @Mutable StringBuilder append(float f);
    @Mutable StringBuilder append(int i);
    @Mutable StringBuilder append(long lng);
    @Mutable StringBuilder append(Object obj);
    @Mutable StringBuilder append(String str);
}

@HasQualifierParameter(Inconsistent.class)
class Number {
     @PolyConsistent float floatValue();
}

@HasQualifierParameter(Inconsistent.class)
class Float {
    @PolyConsistent float floatValue();
}

package java.util;

@Immutable class Optional<T> {
    <T> @Immutable @Local Optional<T> of(T t);
    <T> @Immutable @Local Optional<T> ofNullable(T t);
    <T> @Immutable @Local Optional<T> empty();

    @SideEffectFree
    boolean isPresent();
    @SideEffectFree
    boolean isEmpty();
    @SideEffectFree
    T get();
}

class UUID {
    @Local UUID randomUUID();

    @SideEffectFree
    @PolyConsistent boolean equals(@PolyConsistent Object o);

    @SideEffectFree
    String toString();

    @SideEffectFree
    int hashCode();
}

class Date {
    @SideEffectFree
    boolean after(Date d);
}

interface List<T> {
    @SideEffectFree
    boolean isEmpty();

    @SideEffectFree
    Object subList(int fromIndex, int toIndex);

    @SideEffectFree
    int size();

    @SideEffectFree
    T get(int index);
}

interface Map<K, V> {
    @SideEffectFree
    java.util.Collection<V> values();

    @SideEffectFree
    V get(Object Key);
}

interface Collection<T> {
    @Mutable Stream<T> stream();
}

package java.util.stream;

interface Stream<T> {
    @SideEffectFree
    T findFirst();

    @Mutable Stream<T> filter(java.util.function.Predicate<? super T> predicate);
}